#!/bin/bash
set -e

BLUE=$(tput setaf 4)
RESET=$(tput sgr 0)

# Select image
IMAGE="firedrakeproject/firedrake:2023-10"

# Mount point in the container
CONTAINER_MOUNT_POINT="/home/firedrake/shared"

# Compose Docker command to be run on the host
if [ -t 0 ] ; then
    # Interactive
    DOCKER_RUN_CMD=(docker run --interactive --tty)
else
    # No input terminal
    DOCKER_RUN_CMD=(docker run)
fi
DOCKER_RUN_CMD+=(
    --rm
    --volume="${PWD}":${CONTAINER_MOUNT_POINT}
    --env=DISPLAY=${DISPLAY}
    --volume=/tmp/.X11-unix:/tmp/.X11-unix
    --device=/dev/dri
    --workdir=${CONTAINER_MOUNT_POINT}
    ${IMAGE}
    /bin/bash
    -c
)

# Compose usage message
read -r -d '' USAGE <<EOF || true
# Advise user to install a nice debugger
echo "${BLUE}Run 'pip install pdbpp' to get a nice debugger${RESET}"
echo "${BLUE}${RESET}"
echo "${BLUE}Quick start:${RESET}"
echo "${BLUE}  cd src/${RESET}"
echo "${BLUE}  python plaw_eoc.py${RESET}"
echo "${BLUE}${RESET}"
EOF

# Don't print usage if user's command is to be executed
if [[ $# -ne 0 ]] ; then USAGE=""; fi

# Compose commands to be run in the container
read -r -d '' CONTAINER_CMD <<EOF || true
set -e

# Preserve history files
ln -s ${CONTAINER_MOUNT_POINT}/.{bash,python}_history ~/

# Activate Firedrake virtualenv
source ~/firedrake/bin/activate

# Preserve Firedrake cache
rm -rf \${VIRTUAL_ENV}/.cache
ln -s ${CONTAINER_MOUNT_POINT}/.cache \${VIRTUAL_ENV}/
mkdir -p ${CONTAINER_MOUNT_POINT}/.cache/tsfc/

# Inform user
$USAGE

# Run actual command with its arguments (or Bash if none given)
"\$0" "\$@"
EOF

# Run actual commands with provided command-line parameters
"${DOCKER_RUN_CMD[@]}" "${CONTAINER_CMD}" "$@"
